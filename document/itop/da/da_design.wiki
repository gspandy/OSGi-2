h3. 目标
让DA直接接入 *Modbus* 协议的数据。并通过DA的统一接口（包括发送接口和数据格式）传送给我们的 *Runtime* 平台。同时为后续的可能接入的协议留有接口。
h3. 总体结构
在整个系统中包括如下几个部分：
# 协议相关的内容，暂时叫他Adapter。例如ModbusAdapter。他需要实现的内容包括：
#* 和协议相关的读取和写入的实现。
#* 和协议相关的别名管理。包括别名的解析，转换，验证，映射等。
# 连接管理容器。负责连接的管理。包括创建连接，监听和重新连接等工作。
# 设备信息管理。主要负责当前DA所管理的设备的信息。
#* 信息包括别名和ItemPath
#* 操作包括导入，导出。这个对于项目实施很重要。
#* 提供CLI （Command Line Interface ）供实施人员使用。可以方便的进行导入或导出。
# 设备读写分发器。他会根据接入口传入的统一标识，把特定数据的读写分发给相对应的Adapter实例来进行操作。
# 接入服务。为其他系统提供接入服务。
#* 接入服务要求是双向的。
#* 需要提供多种服务方式。优先采用RMI方式。当前和OSGi交互是采用的这种方式。
!da_design.jpg!

讨论结果：
# 每个Adapter自己去数据库读取自己所需要的信息。
# 链接管理器的主要职能。

H2,采用什么运行方式：
# embed的方式。
# 采用服务的方式。
个人更倾向于使用 通过服务的方式。
数据的缓存是一个要考虑的方面。

h3. 详细设计
h4. 公用部分设计
h5. 数据库的访问
h5. 设备名字空间的定义
h4. 连接管理器

负责管理系统中所提供的所有 *Adapter* , 并在适当的时间去创建这些 *Adapter* 。这里采用扩展点的方式来管理各个Adapter。
h5. *Adapter* 扩展点的设计
具体的定义如下：
{code:xml}
 <extension-point id="daadapter" name="DAAdapter" schema="schema/daadapter.exsd"/>
{code}
相关的Schema如下
{code:xml|title=Adapter扩展点}
   <element name="extension">
      <annotation>
         <appinfo>
            <meta.element />
         </appinfo>
      </annotation>
      <complexType>
         <sequence>
            <element ref="adapter"/>
         </sequence>
         <attribute name="point" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="id" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="name" type="string">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute translatable="true"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

   <element name="adapter">
      <complexType>
         <attribute name="protocalName" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
            </annotation>
         </attribute>
         <attribute name="adaptClass" type="string" use="required">
            <annotation>
               <documentation>
                  
               </documentation>
               <appinfo>
                  <meta.attribute kind="java" basedOn=":com.zthz.itop.daserver.adapter.common.ITopDAAdapter"/>
               </appinfo>
            </annotation>
         </attribute>
      </complexType>
   </element>

{code}
下图是在可视化环境下的表现形式。
!adapter_extension_point.png!
扩展点的adapter代表着一个具体的 *Adapter* ，用protocalName来表示该 *Adapter* 是对何种协议实现。他会对应于我们DA:profile中的type字段。所以要保证两边的映射。
||协议名称||在DaServer中的名称||扩展点中的protocalName||
|TcpModeBus| TcpModbusProtocol | TcpModbusProtocol|
|OPCProtocol| DA:OPCProtocol | DA:OPCProtocol | 


