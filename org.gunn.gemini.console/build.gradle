import org.apache.ivy.core.settings.IvySettings
import org.apache.ivy.core.module.descriptor.DefaultModuleDescriptor
import org.apache.ivy.plugins.parser.xml.XmlModuleDescriptorParser
import org.apache.ivy.core.module.descriptor.DependencyDescriptor
import org.gradle.api.internal.artifacts.dependencies.DefaultExternalModuleDependency
import org.apache.ivy.core.module.id.ModuleRevisionId
//import org.apache.ivy.ant.BuildBundleRepoDescriptorTask

group='org.gemini.console'
version='1.0.0'

apply plugin: 'java'

defaultTasks 'check'

ClassLoader antClassLoader = org.apache.tools.ant.Project.class.classLoader
eclipseHome = '/Users/gengjet/opt/lib/eclipse 3.7/'
configurations {
    antClasspath
}


repositories {
    add(new org.apache.ivy.plugins.resolver.ChainResolver()) {
        name = 'springEBR'
        returnFirst = true
        //自定义的远程连接
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'Repo'
            addIvyPattern 'http://www.nurflugel.com/Home/repository/[organisation]/[module]/[revision]/[module]-[revision].ivy.xml'
            addArtifactPattern 'http://www.nurflugel.com/Home/repository/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]'
          }
        //Spring 创库
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'spRepo'
            addIvyPattern 'http://repository.springsource.com/ivy/bundles/release/[organisation]/[module]/[revision]/[artifact]-[revision].ivy.xml'
            addArtifactPattern 'http://repository.springsource.com/ivy/bundles/release/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]'
          }
        
        add(new org.apache.ivy.plugins.resolver.URLResolver()) {
            name = 'SpringRepo'
            addIvyPattern 'http://repository.springsource.com/ivy/bundles/external/[organisation]/[module]/[revision]/[artifact]-[revision].ivy.xml'
            addArtifactPattern 'http://repository.springsource.com/ivy/bundles/external/[organisation]/[module]/[revision]/[artifact]-[revision].[ext]'
        }
    }
}


task initIvyProperties << {
    File ivyFile = new File('/Users/gengjet/.ant/lib/ivy.jar')
    antClassLoader.addURL(ivyFile.toURI().toURL())
    ant{
        taskdef(resource:'org/apache/ivy/ant/antlib.xml')
    }    
}



//
//println descriptor
/*
moduleDescriptor.getDependencies().each { DependencyDescriptor descriptor ->
    def mappableConfiguration = descriptor.moduleConfigurations.find { moduleConf ->
        println moduleConf
        //rootProjectConfigurations.containsKey(moduleConf)
    }
    
    if (mappableConfiguration) {
        ModuleRevisionId id = descriptor.dependencyRevisionId
        
        println id
        //rootProjectConfigurations[mappableConfiguration].addDependency(
        //    new DefaultExternalModuleDependency(id.organisation, id.name, id.revision, descriptor.getDependencyConfigurations(mappableConfiguration)[0])
        //)
    }
}
*/

dependencies {
   compile group: 'org.junit',           name: 'com.springsource.org.junit',        version: '4.8.1'
}

task myCheck( dependsOn:'initIvyProperties') << {
    //ant.buildobr(out:'repo/eclipse_repo.xml' , baseDir : eclipseHome , basePath:eclipseHome , indent : true)
    //ant.resolve()
    
    IvySettings ivySettings = new IvySettings();
    ivySettings.load(new File("ivysettings.xml"));
    
    //这个就是传说中的顿悟吗？
    DefaultModuleDescriptor moduleDescriptor = (DefaultModuleDescriptor) XmlModuleDescriptorParser
                                                .getInstance()
                                                .parseDescriptor(ivySettings, new File("META-INF/MANIFEST.MF").toURL(), false);
}